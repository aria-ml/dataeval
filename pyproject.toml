[tool.poetry]
name = "dataeval"
version = "0.0.0" # dynamic
description = "DataEval provides a simple interface to characterize image data and its impact on model performance across classification and object-detection tasks"
license = "MIT"
readme = "README.md"
homepage = "https://dataeval.ai/"
repository = "https://github.com/aria-ml/dataeval/"
documentation = "https://dataeval.readthedocs.io/"

authors = [
  "Andrew Weng <andrew.weng@ariacoustics.com>",
  "James Gleeson <james.gleeson@ariacoustics.com>",
  "Jon Botts <jonathan.botts@ariacoustics.com>",
  "Max Bright <max.bright@ariacoustics.com>",
  "Ryan Wood <ryan.wood@ariacoustics.com>",
  "Scott Swan <scott.swan@ariacoustics.com>",
  "Shaun Jullens <shaun.jullens@ariacoustics.com>",
  "Thayer Fisher <thayer.fisher@ariacoustics.com>",
]
maintainers = [
  "ARiA <dataeval@ariacoustics.com>"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
]

packages = [
  {include = "dataeval", from = "src"}
]

[tool.poetry.dependencies]
# required
python = ">=3.9,<3.13"
defusedxml = {version = ">=0.7.1"}
fast_hdbscan = {version = "0.2.0"}  # 0.2.1 hits a bug in condense_tree comparing float to none
lightgbm = {version = ">=4"}
numba = {version = ">=0.59.1"}
numpy = {version = ">=1.24.2"}
pandas = {version = ">=2.0"}
pillow = {version = ">=10.3.0"}
requests = {version = "*"}
scipy = {version = ">=1.10"}
scikit-learn = {version = ">=1.5.0"}
torch = {version = ">=2.2.0", source = "pytorch"}
torchvision = {version = ">=0.17.0", source = "pytorch"}
tqdm = {version = "*"}
typing-extensions = {version = ">=4.12", python = "^3.9"}  # ParamSpec
xxhash = {version = ">=3.3"}

# optional
matplotlib = {version = ">=3.7.1", optional = true}

[tool.poetry.extras]
all = ["matplotlib"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
nox = {version = "*", extras = ["uv"]}
uv = {version = "*"}
poetry = {version = "<2"}
poetry-lock-groups-plugin = {version = "*"}
poetry2conda = {version = "*"}
numpy = {version = ">=2.0.2"}
# lint
ruff = {version = "*"}
codespell = {version = "*", extras = ["toml"]}
# unit
pytest = {version = "*"}
pytest-cov = {version = "*"}
pytest-xdist = {version = "*"}
coverage = {version = "*", extras = ["toml"]}
# type
pyright = {version = "*", extras = ["nodejs"]}
# docs
certifi = {version = ">=2024.07.04"}
enum_tools = {version = ">=0.12.0", extras = ["sphinx"]}
ipykernel = {version = ">=6.26.0"}
ipywidgets = {version = ">=8.1.1"}
jinja2 = {version = ">=3.1.6"}
jupyter-client = {version = ">=8.6.0"}
jupyter-cache = {version = "*"}
myst-nb = {version = ">=1.0.0"}
sphinx-autoapi = {version = "*"}
sphinx-design = {version = "*"}
sphinx-immaterial = {version = "*"}
sphinx-new-tab-link = {version = "*"}
sphinx-tabs = {version = "*"}
Sphinx = {version = ">=7.2.6"}
torchmetrics = {version = ">=1.0.0", source = "pytorch"}
markupsafe = {version = "<3.0.2", optional = true}

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu118"
priority = "explicit"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
pattern = "v(?P<base>\\d+\\.\\d+\\.\\d+)$"

[tool.poetry-dynamic-versioning.substitution]
files = ["src/dataeval/__init__.py"]

[tool.poetry2conda]
name = "dataeval"

[tool.poetry2conda.dependencies]
torch = { name = "pytorch" }
xxhash = { name = "python-xxhash" }

[tool.pyright]
reportMissingImports = false

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["--pythonwarnings=ignore::DeprecationWarning", "--verbose", "--durations=20", "--durations-min=1.0"]
markers = [
  "required: marks tests for required features",
  "optional: marks tests for optional features",
  "requires_all: marks tests that require the all extras",
  "cuda: marks tests that require cuda",
  "year: marks tests that need a specified dataset year",
]

[tool.coverage.run]
source = ["src/dataeval"]
branch = true
concurrency = ["multiprocessing"]
parallel = true

[tool.coverage.report]
exclude_also = [
  "raise NotImplementedError",
  ": \\.\\.\\.",
  "if TYPE_CHECKING:"
]
include = ["*/src/dataeval/*"]
omit = [
  "*/torch/_blocks.py",
  "*/_clusterer.py",
  "*/_fast_mst.py",
]
fail_under = 90

# Ruff rules - https://docs.astral.sh/ruff/rules/
[tool.ruff]
exclude = [
  ".devcontainer",
  ".github",
  ".vscode",
  ".jupyter_cache",
  "*env*",
  "output",
  "build",
  ".nox",
  ".tox",
]
line-length = 120
indent-width = 4
target-version = "py38"
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = ["A", "ANN", "E", "F", "C4", "I", "NPY", "S", "SIM", "RET", "RUF100", "UP"]
ignore = ["ANN401", "NPY002"]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
per-file-ignores = { "*.ipynb" = ["E402"],  "!src/*" = ["ANN", "S", "RET"]}

[tool.ruff.lint.isort]
known-first-party = ["dataeval"]

[tool.ruff.lint.flake8-builtins]
builtins-strict-checking = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.codespell]
skip = './*env*,./output,./docs/build,./docs/source/.jupyter_cache,CHANGELOG.md,poetry.lock,*.html,./docs/source/*/data'
ignore-words-list = ["Hart"]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
