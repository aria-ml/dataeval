#!/bin/bash

# Git rebase script to automatically drop commits with specified title
# Run this script on the branch you want to rebase
# Usage: ./rebase [target_branch] [commit_title_to_drop]

set -e  # Exit on any error

# Default values
DEFAULT_TARGET_BRANCH="origin/main"
DEFAULT_COMMIT_TITLE="Update documentation jupyter-cache"

# Function to display usage
show_usage() {
    echo "Usage: $0 [target_branch] [commit_title_to_drop]"
    echo ""
    echo "This script should be run from the branch you want to rebase."
    echo "It will rebase the current branch onto the target branch."
    echo ""
    echo "Defaults:"
    echo "  target_branch        = '$DEFAULT_TARGET_BRANCH'"
    echo "  commit_title_to_drop = '$DEFAULT_COMMIT_TITLE'"
    echo ""
    echo "Examples:"
    echo "  $0                               # Rebase current branch onto origin/main, drop default commits"
    echo "  $0 main                          # Rebase current branch onto main, drop default commits"
    echo "  $0 main 'WIP: temporary fix'     # Rebase current branch onto main, drop WIP commits"
    echo "  $0 '' 'debug print'              # Rebase onto origin/main, drop debug commits"
    echo ""
    echo "Arguments:"
    echo "  target_branch        - The branch to rebase onto (e.g., main, origin/main, develop)"
    echo "  commit_title_to_drop - The exact commit title/message to drop"
}

# Check for help flags
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_usage
    exit 0
fi

# Check if too many arguments provided
if [ $# -gt 2 ]; then
    echo "Error: Too many arguments"
    show_usage
    exit 1
fi

# Set target branch (use default if not provided or empty)
if [ $# -ge 1 ] && [ -n "$1" ]; then
    TARGET_BRANCH="$1"
else
    TARGET_BRANCH="$DEFAULT_TARGET_BRANCH"
fi

# Set commit title (use default if not provided or empty)
if [ $# -ge 2 ] && [ -n "$2" ]; then
    COMMIT_TITLE="$2"
else
    COMMIT_TITLE="$DEFAULT_COMMIT_TITLE"
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Check if target branch exists
if ! git rev-parse --verify "$TARGET_BRANCH" > /dev/null 2>&1; then
    echo "Error: Target branch '$TARGET_BRANCH' does not exist"
    exit 1
fi

# Check if there are any uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo "Error: You have uncommitted changes. Please commit or stash them first."
    exit 1
fi

# Get the current branch name
CURRENT_BRANCH=$(git branch --show-current)

# Make sure we're not trying to rebase onto the same branch
if [ "$CURRENT_BRANCH" = "$TARGET_BRANCH" ] || [ "$CURRENT_BRANCH" = "${TARGET_BRANCH#origin/}" ]; then
    echo "Error: Cannot rebase branch '$CURRENT_BRANCH' onto itself or its remote equivalent"
    exit 1
fi

echo "Rebasing current branch '$CURRENT_BRANCH' onto: $TARGET_BRANCH"
echo "Dropping commits with title: '$COMMIT_TITLE'"

# Create a temporary file for the rebase todo list
TEMP_TODO=$(mktemp)

# Get the list of commits that would be rebased
# This finds commits that are in the current branch but not in the target branch
COMMITS_TO_REBASE=$(git rev-list --reverse "$TARGET_BRANCH".."$CURRENT_BRANCH" 2>/dev/null || true)

if [ -z "$COMMITS_TO_REBASE" ]; then
    echo "No commits to rebase. Your branch '$CURRENT_BRANCH' is up-to-date with '$TARGET_BRANCH'"
    echo ""
    echo "Debug info:"
    echo "  Current branch: $CURRENT_BRANCH"
    echo "  Target branch: $TARGET_BRANCH"
    echo "  Commits ahead: $(git rev-list --count "$TARGET_BRANCH".."$CURRENT_BRANCH" 2>/dev/null || echo "0")"
    echo "  Commits behind: $(git rev-list --count "$CURRENT_BRANCH".."$TARGET_BRANCH" 2>/dev/null || echo "0")"
    rm -f "$TEMP_TODO"
    exit 0
fi

# Generate the initial todo list from the commits
for commit in $COMMITS_TO_REBASE; do
    echo "pick $commit $(git log --format=%s -n 1 "$commit")" >> "$TEMP_TODO"
done

# Count total commits and commits to drop
TOTAL_COMMITS=$(wc -l < "$TEMP_TODO")
COMMITS_TO_DROP=0

# Process the todo list and modify it
while IFS= read -r line; do
    # Extract the commit hash from the line
    COMMIT_HASH=$(echo "$line" | awk '{print $2}')
    
    # Get the commit message for this hash
    COMMIT_MSG=$(git log --format=%s -n 1 "$COMMIT_HASH" 2>/dev/null || echo "")
    
    # Check if this commit message matches the title to drop
    if [ "$COMMIT_MSG" = "$COMMIT_TITLE" ]; then
        # Replace 'pick' with 'drop'
        echo "$line" | sed 's/^pick/drop/' >> "$TEMP_TODO.new"
        COMMITS_TO_DROP=$((COMMITS_TO_DROP + 1))
        echo "Found commit to drop: $COMMIT_HASH - $COMMIT_MSG"
    else
        echo "$line" >> "$TEMP_TODO.new"
    fi
done < "$TEMP_TODO"

# Replace the original todo list with the modified one
mv "$TEMP_TODO.new" "$TEMP_TODO"

# Check if any commits were found to drop
if [ $COMMITS_TO_DROP -eq 0 ]; then
    echo "No commits found with title: '$COMMIT_TITLE'"
    echo "Proceeding with regular rebase without dropping any commits."
    echo ""
else
    echo ""
    echo "Summary:"
    echo "  Total commits in rebase: $TOTAL_COMMITS"
    echo "  Commits to drop: $COMMITS_TO_DROP"
    echo ""
fi

# Ask for confirmation
if [ $COMMITS_TO_DROP -eq 0 ]; then
    read -p "Proceed with regular rebase? (y/N): " -n 1 -r
else
    read -p "Proceed with rebase and drop $COMMITS_TO_DROP commit(s)? (y/N): " -n 1 -r
fi
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Rebase cancelled."
    rm -f "$TEMP_TODO"
    exit 0
fi

# Perform the rebase using the modified todo list
echo "Performing rebase of '$CURRENT_BRANCH' onto '$TARGET_BRANCH'..."

# Set up environment for non-interactive rebase
export GIT_SEQUENCE_EDITOR="cp $TEMP_TODO"

# Perform the rebase
if git rebase -i "$TARGET_BRANCH"; then
    echo ""
    echo "✅ Rebase completed successfully!"
    echo "Branch '$CURRENT_BRANCH' has been rebased onto '$TARGET_BRANCH'"
    if [ $COMMITS_TO_DROP -gt 0 ]; then
        echo "Dropped $COMMITS_TO_DROP commit(s) with title: '$COMMIT_TITLE'"
    else
        echo "No commits were dropped (none matched the specified title)"
    fi
else
    echo ""
    echo "❌ Rebase failed or was interrupted."
    echo "You may need to resolve conflicts manually."
    echo "Use 'git rebase --continue' after resolving conflicts."
    echo "Use 'git rebase --abort' to cancel the rebase."
    rm -f "$TEMP_TODO"
    exit 1
fi

# Clean up
rm -f "$TEMP_TODO"

echo ""
echo "Rebase completed! Branch '$CURRENT_BRANCH' is now rebased onto '$TARGET_BRANCH'"
