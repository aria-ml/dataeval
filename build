#!/bin/bash -e
set -o pipefail

function showHelp() {
cat << EOF
Build documentation image and generate output

Usage:  ./build [OPTIONS]

Options:
  -h, --help        display this help information
  -q, --quiet       do not print output to console during container execution
      --clean       clean the jupyter-cache before building documentation
      --gpu         run the container using GPUs if available
      --push        push build caches to repository
EOF
exit $1
}

options=$(getopt -l "help,quiet,clean,gpu,push" -o "hq" -n "build" -- "$@")
eval set -- "$options"
while true; do
    case "$1" in
        -h|--help)       showHelp;;
        -q|--quiet)      export quiet="--quiet";;
        --clean)         export clean="clean";;
        --gpu)           export gpuflag="--gpus all";;
        --push)          if [[ ! $CI ]]; then echo "Only CI pipelines should be pushing."; exit 1; else export push_to_repo=1; fi;;
        --)              shift; break;;
    esac
    shift
done

if [[ -f .settings ]]; then
    if [[ $(cat .settings | grep save-build-images) ]]; then
        export save_build_images="true"
    fi
fi

export builder_name="dataeval"
if [[ -z $(docker builder ls --format '{{.Name}}' | grep $builder_name) ]]; then
    echo "builder instance named $builder_name doesn't exist, creating it now..."
    docker builder create \
        --driver docker-container \
        --bootstrap \
        --name $builder_name
fi

function build_image() {
    target=$1

    cache_images=("$target")
    if [[ $target == docs ]]; then
        cache_images+=("data")
        cache_images+=("base")
    fi

    # create cache array
    cache=()
    for cache_image in ${cache_images[@]}; do
        if [[ ${BRANCH_CACHE} && $cache_image != data ]]; then
            cache+=("${BRANCH_CACHE}${cache_image}")
        fi
        # always cache from main
        cache+=("${MAIN_CACHE}:${cache_image}")
    done

    # set cache_from and cache_to args
    cache_from_arg=$(echo ${cache[*]} | xargs -n1 sh -c 'echo --cache-from type=registry,ref=$0')
    if [[ $push_to_repo ]]; then
        # Writing to the cache means that you must be able to push to the registry, therefore
        # don't want to force users to login to the registry just to build.
        cache_to_arg="--cache-to type=registry,mode=max,image-manifest=true,ref=${cache[0]}"
    else
        cache_to_arg=""
    fi

    # only push an image up to the registry for docs images
    if [[ $target == docs ]]; then
        image_tag="${TASK_IMAGE}${target}"
    fi

    # build output_arg as appropriate if image needs to be pushed, otherwise just populate the registry cache
    if [[ $image_tag ]]; then
        output_arg="--output type=image,name=${image_tag}"
    else
        output_arg="--output type=cacheonly"
    fi

    if [[ $target == docs || $save_build_images ]]; then
        # By default the docker-container driver doesn't load images to the
        # local docker images store, these args will cause it to do so.
        load_arg="--tag ${image_tag} --load"
    fi

    docker_build_cmd="docker buildx build \
        $load_arg \
        --builder $builder_name \
        $no_cache_filter_arg \
        $cache_from_arg \
        $cache_to_arg \
        $output_arg \
        --target $target \
        ."
    
    echo "======================================================================"
    echo "Building $target..."
    echo $docker_build_cmd
    if [[ ! $quiet ]]; then
        time $docker_build_cmd
    else
        $docker_build_cmd &> /dev/null
    fi
    echo "======================================================================"
}

function run_image() {
    task=$1
    
    container_name="run-${task}"
    if [[ $CI_PIPELINE_ID ]]; then
        container_name="${container_name}-${CI_PIPELINE_ID}"
    fi

    # Clear any residual containers from previous runs
    docker rm -f $container_name 2> /dev/null || true

    image_tag="${TASK_IMAGE}${target}"
    docker_run_cmd = "docker run --tty --env TERM=xterm-256color --interactive --name $container_name $gpuflag $image_tag $@"

    mkdir -p output
    echo "=================================================="
    echo "Running ${task}..."
    echo $docker_run_cmd
    echo "--------------------------------------------------"
    set +e
    script -qec "$docker_run_cmd" output/build.log
    exitcode=$?
    set -e
    echo "--------------------------------------------------"
    echo "${container_name} exit code: ${exitcode}"
    echo "=================================================="

    docker cp $container_name:/dataeval/output/ .

    if [[ $exitcode != 0 ]]; then
        exit $exitcode
    fi
}

# In CI pipelines use commit branch name or merge request source branch name
# These are mutually exclusive when set
# https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
if [[ $CI ]]; then
    branch_name=$CI_COMMIT_BRANCH$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    main_branch=$CI_DEFAULT_BRANCH
else
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    main_branch="main"
fi

namespace="harbor.jatic.net/dataeval" 
if [[ $branch_name == $main_branch ]]; then
    repository="main"
else
    repository="dev"
    shopt -s extglob
    tag_prefix="${branch_name//+([^a-zA-Z0-9])/-}-"
    shopt -u extglob
fi

# construct image and cache names
export TASK_IMAGE="${namespace}/${repository}:${tag_prefix}"

export MAIN_CACHE="${namespace}/cache"
if [[ $tag_prefix ]]; then
    export BRANCH_CACHE="${namespace}/cache:${tag_prefix}"
fi

if [[ $CI ]]; then
    if [[ $branch_name == $main_branch ]]; then
        build_image data
    fi
    build_image base
fi

build_image docs
run_image docs $clean
