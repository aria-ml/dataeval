#!/bin/bash -e
set -o pipefail

function showHelp() {
cat << EOF
Usage:
  build [options] <tasks(s)> <python version(s)>

Options:
      --build-base  only build base dependency images
      --build-task  only build task images
  -d, --devenv      only build the developer environment image
  -h, --help        display this help information
  -v, --verbose     print output to console during container execution
      --gpu         enable gpu support on task execution
      --push        push all built images to repository

Default:
  run unit tests and type check for 3.8-3.11 as well as lint and docs

Python Versions:
  3.8-3.11 are supported

Tasks:
  unit    run unit tests
  type    run typecheck
  lint    run static code analysis
  deps    run minimum dependency tests
  docs    generate documentation
  qdocs   generate documentation using cached notebooks

Note:
  lint and docs are always performed on python 3.11
EOF
exit $1
}

options=$(getopt -l "help,verbose,gpu,build-base,build-task,devenv,push" -o "hvd" -n "build" -- "$@")
eval set -- "$options"
while true; do
    case "$1" in
        -h|--help)       showHelp;;
        -v|--verbose)    export verbose=1;;
        --gpu)           export gpuflag="--gpus all";;
        --build-base)    build_base=1;;
        --build-task)    build_task=1;;
        -d|--devenv)     devenv=1;;
        --push)          if [[ ! $CI ]]; then echo "Only CI pipelines should be pushing."; exit 1; else export push_to_repo=1; fi;;
        --)              shift; break;;
    esac
    shift
done

if [[ -f .settings ]]; then
    if [[ $(cat .settings | grep save-build-images) ]]; then
        export save_build_images="true"
    fi
fi

# declare lookup maps
declare -A supported_pvers=([3.8]=1 [3.9]=1 [3.10]=1 [3.11]=1)
declare -A supported_tasks=([unit]=1 [type]=1 [lint]=1 [deps]=1 [docs]=1 [qdocs]=1)

# generate python and task lists
declare -A pvers; declare -A tasks;
count=0; c_pvers=0; c_tasks=0;

# validate args
for arg do
    if [[ $arg == -* ]]; then continue; fi
    if [[ ${supported_pvers["$arg"]} ]]; then pvers[$arg]=1; ((++c_pvers)); fi
    if [[ ${supported_tasks["$arg"]} ]]; then tasks[$arg]=1; ((++c_tasks)); fi
    ((++count))
done

# show help if arg count mismatch
if [[ $((c_pvers + c_tasks)) != $count ]]; then showHelp 1; fi

# set all python versions if none specified
if [[ $count == 0 || ($c_pvers == 0 && $c_tasks != 0) ]]; then pvers=([3.8]=1 [3.9]=1 [3.10]=1 [3.11]=1); fi

# for build_task we should run these specific tasks
if [[ $build_task ]]; then tasks=([unit]=1 [type]=1 [lint]=1 [deps]=1); fi

# set defaults if not specified
if [[ ! $build_base && ! $build_task && ! $devenv ]]; then
    if [[ $count == 0 || ($c_tasks == 0 && $c_pvers != 0) ]]; then tasks[unit]=1; tasks[type]=1; fi
fi

# generate "task-pver" jobs
declare -A jobs;
for task in "${!tasks[@]}"; do
    case "$task" in
        docs|qdocs) jobs["$task-3.11"]=1;;
        *) for pver in "${!pvers[@]}"; do jobs["$task-$pver"]=1; done;;
    esac
done
if [[ ${tasks[docs]} || ${tasks[qdocs]} ]]; then pvers[3.11]=1; fi

export builder_name="daml"
if [[ -z $(docker builder ls --format '{{.Name}}' | grep $builder_name) ]]; then
    echo "builder instance named $builder_name doesn't exist, creating it now..."
    docker builder create \
        --driver docker-container \
        --bootstrap \
        --name $builder_name
fi

function post_build_cleanup() {
    tag=$1
    container_name=$2

    if [[ $(docker container ls --all --filter name=$container_name) ]]; then
        docker container rm --force $container_name &> /dev/null
    fi

    if [[ -z $save_build_images && $(docker image ls --filter reference=$tag) ]]; then
        docker image rm --force $tag &> /dev/null
    fi
}

function build_image() {
    tag=$1
    target=$2
    python_version=$3

    base_tag="${base_image}-${python_version}"
    deps_tag="${deps_image}-${python_version}"
    build_tag="${build_image}-${python_version}"

    if [[ $(docker manifest inspect $base_tag) ]]; then
        image_args="--build-arg base_image=$base_tag"
    fi

    if [[ $(docker manifest inspect $deps_tag) ]]; then
        image_args="$image_args --build-arg deps_image=$deps_tag"
    fi

    if [[ $(docker manifest inspect $build_tag) ]]; then
        image_args="$image_args --build-arg build_image=$build_tag"
    fi

    python_optimization_args="\
        --build-arg pyenv_enable_opt=--enable-optimizations \
        --build-arg pyenv_with_lto=--with-lto"

    cache="${tag/\/${image_name}:${branch_prefix}/\/cache:}"
    cache_from_arg="--cache-from type=registry,ref=$cache"

    cache_to_arg=""
    if [[ $cache_to && $push_to_repo ]]; then
        # Writing to the cache means that you must be able to push to the registry, therefore
        # don't want to force users to login to the registry just to build.
        cache_to_arg="--cache-to type=registry,mode=max,image-manifest=true,ref=$cache"
    fi

    output_arg="--output type=image,name=$tag"
    if [[ $push_to_repo ]]; then
        output_arg="${output_arg},push=true"
    fi

    # Save the images locally if we're not pushing images to the repo (or of the setting is set)
    if [[ $save_build_images || -z $push_to_repo ]]; then
        # By default the docker-container driver doesn't load images to the
        # local docker images store, these args will cause it to do so.
        load_arg="--tag ${tag} --load"
    fi

    docker_build_cmd="docker buildx build $verbosity \
        $load_arg \
        --builder $builder_name \
        --build-arg python_version=$python_version \
        $python_optimization_args \
        $image_args \
        $cache_from_arg \
        $cache_to_arg \
        $output_arg \
        --target $target \
        ."

    if [[ $verbose ]]; then
        echo "========================================"
        echo "Building $tag..."
        echo $docker_build_cmd
        time $docker_build_cmd
        echo "========================================"
    else
        $docker_build_cmd &> /dev/null
    fi
}

function build_and_run() {
    IFS=- read -r task pver <<< $1

    container_name="run-${task}-${pver}"
    if [[ $CI_PIPELINE_ID ]]; then
        container_name="${container_name}-${CI_PIPELINE_ID}"
    fi

    # If the image was pushed, then we need to be sure to pull the updated image
    if [[ $push_to_repo ]]; then
        pull_arg="--pull always"
    fi

    tag="${image}:${branch_prefix}${deps_hash}-${task}-${pver}"

    trap "post_build_cleanup $tag $container_name" EXIT

    # NOTE: If you ./build --push at the same time as a pipeline in the same
    # branch that is running you can potentially overwrite a results image that
    # will be read from in that pipeline run.
    if [[ ! $(docker manifest inspect $tag) ]]; then
        build_image $tag $task $pver
    fi

    echo "======================================================================"
    echo "Output from ${container_name}"
    echo "----------------"
    set +e
    docker run --interactive $pull_arg --name $container_name $gpuflag $tag
    exitcode=$?
    set -e
    echo "----------------"
    echo "${container_name} exit code: ${exitcode}"
    echo "======================================================================"

    mkdir -p output
    docker cp $container_name:/daml/output/ .

    if [[ $exitcode != 0 ]]; then
        exit $exitcode
    fi
}

function ensure_image() {
    target=$1
    python_version=$2

    if [[ $target == "pybase" ]]; then
        tag="${base_image}-${python_version}"
    elif [[ $target == "pydeps" ]]; then
        tag="${deps_image}-${python_version}"
    elif [[ $target == "build" ]]; then
        tag="${build_image}-${python_version}"
    else
        echo "unknown target: ${target}"
        exit 1
    fi

    # Rebuild and push the image on main branch commits, or just skip if exists
    if [[ $CI && $branch_name == $main_branch ]]; then
        cache_to=1 build_image $tag $target $python_version
    elif [[ ! $(docker manifest inspect $tag) ]]; then
        build_image $tag $target $python_version
    else
        echo "Verified $tag image in registry"
    fi
}

export -f post_build_cleanup
export -f build_image
export -f build_and_run

export deps_hash=$(sha256sum poetry.lock | cut -c 1-8)

# In CI pipelines use commit branch name or merge request source branch name
# These are mutually exclusive when set
# https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
if [[ $CI ]]; then
    export branch_name=$CI_COMMIT_BRANCH$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
else
    export branch_name=$(git rev-parse --abbrev-ref HEAD)
fi

if [[ $CI_DEFAULT_BRANCH ]]; then
    export main_branch=$CI_DEFAULT_BRANCH
else
    export main_branch="main"
fi

if [[ $branch_name == $main_branch ]]; then
    export image_name="main"
else
    export image_name="dev"
    export branch_prefix="${branch_name}-"
fi

export image="harbor.jatic.net/daml/${image_name}"
export base_image="${image}:${branch_prefix}pybase"
export deps_image="${image}:${branch_prefix}${deps_hash}-pydeps"
export build_image="${image}:${branch_prefix}${deps_hash}-build"

if [[ -z $verbose ]]; then
    verbosity="--quiet"
else
    keep_order="--keep-order"
fi
export verbosity

START=$(date +%s)

for pver in ${!pvers[@]}; do
    ensure_image pybase $pver
    ensure_image pydeps $pver
    if [[ ! $devenv ]]; then
        ensure_image build $pver
        # In the CI pipeline - all tasks are prebuilt in the build stage with argument --build-task
        if [[ ! $CI || $build_task ]]; then
            for task in ${!tasks[@]}; do
                build_image "${image}:${branch_prefix}${deps_hash}-${task}-${pver}" ${task} $pver
            done
        fi
    fi
done

if [[ $devenv ]]; then
    echo "Building devcontainer with python ${!pvers[@]}..."
    (cat Dockerfile && echo ENV versions=\"${!pvers[@]}\" && echo -n ${!pvers[@]} | xargs -d' ' -I{} echo COPY --chown=\${UID}/ --link --from=$deps_image-{} \${PYENV_ROOT}/ \${PYENV_ROOT}/) |
    docker build $verbosity --tag daml-devcontainer --target devcontainer -
    docker image prune -f
fi

if [[ $build_base || $build_task || $devenv ]]; then
    exit $?
fi

END=$(date +%s)
DIFF=$(( $END - $START ))
echo "------"
echo "Image build preparation completed in $DIFF seconds"
echo "------"

# execute jobs
echo "Running ${!jobs[@]}..."
case ${#jobs[@]} in
    0)  showHelp 1;;
    1)  export verbose=1; build_and_run ${!jobs[@]};;
    *)  LANG=C parallel $keep_order --lb --tag 'set -o pipefail; build_and_run' ::: ${!jobs[@]};;
esac
