[tox]
skipsdist = True
usedevelop = True
envlist =
    py{39,310,311}
    type-py{39,310,311}
    lint
    deps
    doctest

[testenv]
allowlist_externals = mv
setenv =
    UV_INDEX_STRATEGY=unsafe-best-match
    TF_CPP_MIN_LOG_LEVEL=3
    CUDA_VISIBLE_DEVICES=-1
    POETRY_DYNAMIC_VERSIONING_BYPASS=0.0.0
    TQDM_DISABLE=1
deps =
    -r {toxinidir}/environment/requirements.txt
    -r {toxinidir}/environment/requirements-dev.txt
    -e {toxinidir}/.
commands =
    pytest --cov -n 8 --dist loadgroup --junitxml=output/junit.{env_name}.xml --cov-report term --cov-report xml:output/coverage.{env_name}.xml --cov-report html:output/htmlcov.{env_name}
    mv .coverage output/.coverage.{env_name}

[testenv:type-py{39,310,311}]
allowlist_externals = pyright
commands =
    pyright src/ tests/
    pyright --ignoreexternal --verifytypes dataeval

[testenv:deps]
setenv = POETRY_DYNAMIC_VERSIONING_BYPASS=0.0.0
deps =
    pytest
    {toxinidir}/.
commands = pytest tests/test_mindeps.py

[testenv:lint]
deps =
    ruff
    codespell[toml]
commands_pre = []
commands =
    ruff check --show-fixes --exit-non-zero-on-fix --fix
    codespell

[testenv:docs]
base_python = py311
allowlist_externals =
    bash
    cp
change_dir = docs
deps = {[testenv]deps}
setenv =
    UV_INDEX_STRATEGY=unsafe-best-match
    TF_CPP_MIN_LOG_LEVEL=3
    PYDEVD_DISABLE_FILE_VALIDATION=1
    POETRY_DYNAMIC_VERSIONING_BYPASS=0.0.0
    LANG=C
commands_pre =
    bash -c 'rm -rf ../output/docs/doc*'
commands =
    bash -c 'rm -rf .jupyter_cache'
    sphinx-build -W --keep-going -E -T -j 4 -b html -d _build/doctrees -D language=en . ../output/docs/html
    cp -R .jupyter_cache ../output/docs
    
[testenv:qdocs]
base = docs
commands = 
    sphinx-build -W --keep-going -E -T -j 4 -b html -d _build/doctrees -D language=en . ../output/docs/html
    cp -R .jupyter_cache ../output/docs
    bash -c '\
        if (which git) > /dev/null; then \
            if [[ ! $(git status --porcelain | grep docs/.jupyter_cache | grep --invert-match global.db) ]]; then \
                echo "No cache changes - reverting global.db"; \
                git checkout -- .jupyter_cache/global.db; \
            fi; \
        fi'

[testenv:doctest]
base = docs
setenv =
    {[testenv:docs]setenv}
    NB_EXECUTION_MODE_OVERRIDE=off
    TQDM_DISABLE=1
commands =
    sphinx-build -M doctest . ../output/docs

[testenv:lock]
allowlist_externals =
    poetry
    cp
deps =
    poetry
    poetry-lock-groups-plugin
    poetry2conda
commands_pre = []
commands =
    cp -f environment/poetry.lock poetry.lock
    poetry config warnings.export false
    poetry lock --with=dev {posargs:--no-update}
    poetry export --all-extras --without-hashes -o environment/requirements.txt
    poetry export --only=dev --without-hashes -o environment/requirements-dev.txt
    cp -f poetry.lock environment/poetry.lock
    poetry lock {posargs:--no-update}
    poetry2conda pyproject.toml environment/environment.yaml -E all

[testenv:check]
allowlist_externals =
    poetry
    cp
    rm
    diff
    cmp
deps =
    poetry
commands_pre =
    cp -f poetry.lock poetry.tmp
commands =
    poetry config warnings.export false
    poetry check
    cp -f environment/poetry.lock poetry.lock
    poetry check
    poetry export --all-extras --without-hashes -o environment/requirements.check
    diff environment/requirements.txt environment/requirements.check
    cmp -s environment/requirements.txt environment/requirements.check
    poetry export --only=dev --without-hashes -o environment/requirements-dev.check
    diff environment/requirements-dev.txt environment/requirements-dev.check
    cmp -s environment/requirements-dev.txt environment/requirements-dev.check
commands_post =
    cp -f poetry.tmp poetry.lock
    rm -f poetry.tmp environment/requirements.check environment/requirements-dev.check
