variables:
  PYTHON_LATEST_SUPPORTED_VERSION: '3.12'
  DOCKER_DRIVER: overlay2
  SAST_EXCLUDED_PATHS: spec,test,tests,tmp,.nox,output
  DOCS_RUNNER_TAG: single-gpu
  UV_CACHE_DIR: .uv-cache
  UV_LINK_MODE: copy
  UV_IMAGE: ghcr.io/astral-sh/uv
  BASE_LAYER: bookworm
  FORCE_COLOR: '1'
  UPDATE_CACHE_MESSAGE: 'Update documentation jupyter-cache'
  ENV_AUTO_STOP_IN: '1 week'

workflow:
  # Allows jobs in this workflow to be interrupted:
  # https://gitlab.jatic.net/help/ci/yaml/index.md#workflowauto_cancelon_new_commit
  auto_cancel:
    on_new_commit: interruptible
  rules:
    # Release Workflow
    - if: $CI_PIPELINE_SOURCE == 'schedule' && $CREATE_NEW_RELEASE
    # Merge Request Workflow
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      variables:
        ENV_PREFIX: '$CI_MERGE_REQUEST_IID/'
    # Skip CHANGELOG.md updates
    - if: $CI_COMMIT_BRANCH == 'main'
      changes: ["CHANGELOG.md"]
      when: never
    # Gitlab web UI trigger
    - if: $CI_PIPELINE_SOURCE == 'web'
    # Commit Main Branch Workflow
    - if: $CI_COMMIT_BRANCH == 'main'
      variables:
        DOCS_RUNNER_TAG: 'multi-gpu'
        ENV_AUTO_STOP_IN: 'never'

default:
  # This should allow pipelines to auto-cancel when redundant:
  # https://gitlab.jatic.net/help/ci/pipelines/settings.md#auto-cancel-redundant-pipelines
  # https://gitlab.jatic.net/help/ci/yaml/index.md#interruptible
  interruptible: true
  tags:
    - autoscaler

image: $UV_IMAGE:python$PYTHON_LATEST_SUPPORTED_VERSION-$BASE_LAYER

stages:
  - test
  - docs
  - release
  - security

### RULE ANCHORS ###

.on_release: &on_release
  - if: $CREATE_NEW_RELEASE

.exclude_main: &exclude_main
  - if: $CI_COMMIT_BRANCH == 'main'
    when: never

.on_run: &on_run
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_BRANCH == 'main' || $CI_PIPELINE_SOURCE == 'web'

.on_run_with_deps: &on_run_with_deps
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_PIPELINE_SOURCE == 'web'
    changes:
      paths:
        - pyproject.toml
        - uv.lock
  - if: $CI_COMMIT_BRANCH == 'main'

.on_run_with_code: &on_run_with_code
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_PIPELINE_SOURCE == 'web'
    changes:
      paths:
        - src/**/*
        - tests/**/*
        - uv.lock
  - if: $CI_COMMIT_BRANCH == 'main'

.on_run_with_docs: &on_run_with_docs
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_PIPELINE_SOURCE == 'web'
    changes:
      paths:
        - src/**/*
        - docs/**/*
        - uv.lock
        - "*.md"
  - if: $CI_COMMIT_BRANCH == 'main' && $CI_COMMIT_TITLE != $UPDATE_CACHE_MESSAGE
    changes:
      paths:
        - src/**/*
        - docs/**/*
        - uv.lock
        - "*.md"
    variables:
      DOCS_CLEAN: '--clean'
  - if: $CI_COMMIT_BRANCH == 'main'

.on_merge_request_only: &on_merge_request_only
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

.on_commit_main_only: &on_commit_main_only
  - if: $CREATE_NEW_RELEASE
    when: never
  - if: $CI_COMMIT_BRANCH == 'main'

### TEMPLATES ###

.harbor:
  image: docker:25.0.5-git
  before_script:
    - apk add --no-cache bash util-linux
    - echo ${DATAEVAL_HARBOR_TOKEN} | docker login harbor.jatic.net -u 'robot$dataeval+dataeval-build' --password-stdin || echo "Failed to login to Harbor..."
  after_script:
    - docker logout harbor.jatic.net|| echo "Failed to logout from Harbor..."
    
.nox:
  needs: []
  image: $UV_IMAGE:python$PYTHON_VERSION-$BASE_LAYER
  before_script:
    - uv pip install nox[uv] --system
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
        - data
  after_script:
    - uv cache prune --ci
  variables:
    PYTHON_VERSION: $PYTHON_LATEST_SUPPORTED_VERSION

.nox_all:
  extends: .nox
  image: $UV_IMAGE:python$PYTHON_VERSION-$BASE_LAYER
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.10", "3.11", "3.12"]

.conda:
  needs: []
  image: mambaorg/micromamba:2-cuda11.8.0-ubuntu20.04
  before_script:
    - eval "$(micromamba shell hook --shell bash)"
    - micromamba create -f environment.yaml -n dataeval python=$PYTHON_VERSION
    - micromamba activate dataeval
    - micromamba install pytest pytest-xdist requests
    - pip install -e . --no-deps
    - pip install maite-datasets
    - micromamba list
  variables:
    SETUPTOOLS_SCM_PRETEND_VERSION: "0.0.0"

.conda_all:
  extends: .conda
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.10", "3.11", "3.12"]  

### TEST ###

lint:
  extends: .nox
  script:
    - nox -e lint
  rules: *on_run

minimum install:
  extends: .nox
  script:
    - nox -e deps
  variables:
    PYTHON_VERSION: "3.10"
  rules: *on_run_with_code

typecheck:
  extends: .nox_all
  script:
    - nox -e type
  rules: *on_run_with_code

test:
  extends: .nox_all
  script:
    - nox -e test
  artifacts:
    reports:
      junit: output/junit.*.xml
    paths:
      - output/*
  rules: *on_run

conda:
  extends: .conda_all
  script:
    - pytest -m "not optional"
  rules: *on_run

verify lock:
  extends: .nox
  script:
    - nox -e check
  rules: *on_run_with_deps

### DOCS ###

docs:
  stage: docs
  extends: .harbor
  needs: []
  tags:
    - $DOCS_RUNNER_TAG
  script:
    - ./docs/docker_build --push --gpu $DOCS_CLEAN
  artifacts:
    paths:
      - output/docs/.jupyter_cache/
      - output/docs/html/
    when: always
  rules: *on_run_with_docs

doctest:
  stage: docs
  extends: .nox
  script:
    - nox -e doctest
  rules: *on_run_with_docs

linkchecker:
  stage: docs
  needs: []
  image:
    name: ghcr.io/tcort/markdown-link-check:stable
    entrypoint: ["/bin/sh", "-c"]
  script:
    - markdown-link-check *.md
    - markdown-link-check ./docs/source
  rules: *on_run_with_docs

markdownlint:
  stage: docs
  needs: []
  image:
    name: davidanson/markdownlint-cli2
    entrypoint: [""]
  script: |
    markdownlint-cli2 README.md || FAIL=1
    markdownlint-cli2 CONTRIBUTING.md || FAIL=1
    markdownlint-cli2 "docs/**/*.md" "#node_modules" || FAIL=1
    exit $FAIL
  rules: *on_run_with_docs

### RELEASE ###

.publish_merge_request_env:
  stage: release
  artifacts:
    paths:
      - public/
  environment:
    name: '$ENV_PREFIX$ENV_JOB'
    url: 'https://jatic.pages.jatic.net/-/aria/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public/index.html'
    auto_stop_in: '$ENV_AUTO_STOP_IN'

coverage:
  extends: .publish_merge_request_env
  needs: [test]
  before_script:
    - uv pip install coverage --system
  script:
    - cp --recursive $(pwd) /dataeval
    - coverage combine ./output
    - coverage report -m --skip-empty --precision=2
    - coverage xml --skip-empty
    - coverage html --skip-empty
    - mv htmlcov/ ./public/
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - public/
  variables:
    ENV_JOB: coverage
  rules: *on_run

pages preview:
  extends: .publish_merge_request_env
  needs:
    - job: docs
      artifacts: true
  script:
    - mv output/docs/html/ ./public/
  variables:
    ENV_JOB: docs
  rules:
    - *exclude_main
    - *on_run_with_docs

pages:
  stage: release
  needs:
    - job: docs
      artifacts: true
  script:
    - mv output/docs/html/ ./public/
  artifacts:
    paths:
      - public
  rules: *on_commit_main_only
  
update cache:
  stage: release
  needs:
    - job: docs
      artifacts: true
  script: |
    apt-get update && apt-get install git-lfs
    git fetch --all --depth 1
    git switch --force ${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
    rm -rf docs/source/.jupyter_cache
    mkdir -p docs/source/.jupyter_cache
    cp -R output/docs/.jupyter_cache/* docs/source/.jupyter_cache
    if [[ ! $(git status --porcelain | tee /dev/stderr | grep docs/source/.jupyter_cache | grep --invert-match global.db) ]]; then echo "No cache changes"; exit 0; fi
    git add docs/source/.jupyter_cache/*
    git config --global http.postBuffer 100m
    git config --global user.email "${GITLAB_USER_EMAIL}"
    git config --global user.name "${GITLAB_USER_NAME}"
    git commit --message "${UPDATE_CACHE_MESSAGE}"
    git push https://dataeval-bot:${DATAEVAL_BUILD_PAT}@gitlab.jatic.net/jatic/aria/dataeval.git
  rules:
    - *on_run_with_docs

validate release tag:
  stage: release
  needs: []
  script:
    - .gitlab/scripts/validate_release_label.py
  rules:
    - *exclude_main
    - *on_run

# This job will only run if all previous stages have succeeded,
# and it creates a tag that signifies that all testing has passed.
tag release candidate:
  stage: release
  before_script:
    - uv pip install requests --system
  script:
    - .gitlab/scripts/update_latest_known_good.py
  rules: *on_commit_main_only

# This job cleans up the image tags from the harbor registry
# associated with the last merged branch.
remove image tags:
  stage: release
  needs: []
  before_script:
    - uv pip install requests --system
  script:
    - .gitlab/scripts/remove_image_tags.py
  allow_failure: true
  rules: *on_commit_main_only

# This job updates the changelog and tags the commit hash with a
# new version tag, which gets picked up and published from a GitHub
# action defined in .github/workflows/publish.yml
create release:
  stage: release
  needs: []
  before_script:
    - uv pip install requests --system
  script:
    - .gitlab/scripts/create_release.py
  rules: *on_release

export-merged-sbom:
  stage: release
  image: docker:stable
  before_script:
    - apk add --update jq curl
  script:
    - >
      curl --header "Authorization: Bearer $PRIVATE_TOKEN"
      --output export.sh --url "https://gitlab.jatic.net/api/v4/snippets/7/raw"
    - /bin/sh export.sh
  artifacts:
    paths:
      - "gl-sbom-merged-*.cdx.json"
  variables:
    PRIVATE_TOKEN: $DATAEVAL_BUILD_PAT
  rules: *on_release

### SECURITY ###

include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml

secret_detection:
  stage: security
  needs: []
  rules:
    - *exclude_main
    - *on_run

gemnasium-python-dependency_scanning:
  stage: security
  needs: []
  rules:
    - *exclude_main
    - *on_run

semgrep-sast:
  stage: security
  needs: []
  rules:
    - *exclude_main
    - *on_run
