#!/bin/bash -e

function showHelp() {
cat << EOF
Usage:
  run <task> [pyenv python version]

Tasks:
  help    show this help message
  quick   quick CI validation (qdocs) (default)
  full    full CI validation (docs)
  unit    run unit tests
  deps    run dependency tests
  type    run typecheck
  lint    run static code analysis
  docs    generate documentation (Python 3.11 only)
  qdocs   generate docs without notebooks (Python 3.11 only)

Optional Pyenv Python version:
  3.8, 3.9, 3.10 and 3.11 are supported
EOF
exit $1
}

declare -A supported_tasks=([quick]=1 [full]=1 [unit]=1 [deps]=1 [type]=1 [lint]=1 [docs]=1 [qdocs]=1)
declare -A supported_pvers=([3.8]=1 [3.9]=1 [3.10]=1 [3.11]=1)

# validate args
if (( $# == 0 )); then task=quick; else task=$1; fi
if [[ $task == "help" ]] || [[ $task == "--help" ]] || [[ $task == "-h" ]]; then showHelp 0; fi
if (( $# > 2 )); then echo Too many parameters; showHelp 1; fi
if [[ ! ${supported_tasks[$task]} ]]; then echo Invalid task; showHelp 1; fi
if [[ $# == 2 ]]; then
    if [[ ! ${supported_pvers[$2]} ]]; then echo Unsupported Python version; showHelp 1; fi
    if ! (pyenv versions 2>/dev/null | grep -q $2); then echo Pyenv installation of Python version not found; exit 1; fi
    pver=$2
    python=$(PYENV_VERSION=$2 pyenv which python)
else
    pver=$(python --version | cut -d' ' -f2 | cut -d'.' -f1-2)
    python=$(which python)
fi
poetry_run="$python -m poetry --quiet run"

# deps task skips poetry check as it builds its own virtual environment for the test
# all other tests use poetry environment for execution
if ! [ $task == "deps" ] && ! ($poetry_run pip freeze | grep daml) >/dev/null 2>&1; then
    echo "DAML environment not found.  Please rebuild your devcontainer or install using poetry with all extras and groups."
    exit 1
fi

FAILURES=0
trap 'FAILURES=$((FAILURES+1))' ERR

case $task in
    "quick"|"full")
        if [[ "$task" == "quick" ]]; then docstask=qdocs; else docstask=docs; fi
        ./run lint $pver || failure="lint "
        ./run type $pver || failure="${failure}type "
        ./run unit $pver || failure="${failure}unit "
        ./run $docstask $pver || failure="${failure}${docstask} "

        if [[ $failure ]]; then echo && echo "The following tasks failed: $failure" && exit 1; fi
        echo && echo "All tasks succeeded."
        ;;
    *)
        echo "Running $task task in Python $pver..."
        ;;&
    "unit")
        $poetry_run pytest --cov -n auto --junitxml=output/junit.$pver.xml --cov-report term --cov-report xml:output/coverage.$pver.xml --cov-report html:output/htmlcov.$pver
        mv .coverage output/.coverage.$pver
        ;;
    "deps")
        $python -m pip install virtualenv
        $python -m virtualenv .venv-deps
        source .venv-deps/bin/activate
        pip install . pytest
        pytest tests/metrics/test_ber.py tests/metrics/test_divergence.py tests/metrics/test_uap.py
        rm -rf .venv-deps
        ;;
    "type")
        $poetry_run pyright src/ tests/
        $poetry_run pyright --ignoreexternal --verifytypes daml
        ;;
    "lint")
        $poetry_run ruff check --exit-non-zero-on-fix --fix
        $poetry_run codespell
        ;;
    "docs"|"qdocs")
        pushd docs
        if [[ $pver == 3.8 ]]; then echo "Generating docs is not supported in python 3.8"; exit 1; fi
        if [ "$task" == "docs" ]; then $poetry_run jcache cache clear -f; fi
        export TF_CPP_MIN_LOG_LEVEL=3
        export PYDEVD_DISABLE_FILE_VALIDATION=1
        NB_EXECUTION_MODE_OVERRIDE=off $poetry_run sphinx-build -M doctest . ../output/docs
        $poetry_run sphinx-build -E -T -j 4 -b html -d _build/doctrees -D language=en . ../output/docs/html
        cp -R .jupyter_cache ../output/docs
        popd
        if [[ $FAILURES != 0 ]]; then cat /tmp/sphinx*.log && mv /tmp/sphinx*.log output/docs; fi
        ;;
esac

exit $FAILURES